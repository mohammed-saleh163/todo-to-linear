#!/bin/bash

# Loop through all git-tracked files
git ls-files | while read -r file; do
  # Skip binary files
  if [[ $(file --mime "$file") != *text* ]]; then
    continue
  fi

  # Match comment lines with the prefix TODO or FIXME or BUG

  grep -nE '^\s*(//|\*|#)\s*(TODO:|FIXME:|BUG:)' "$file" | while IFS=: read -r lineNum line; do
    # Get blame author for the line
    author=$(git blame -L "$lineNum","$lineNum" --line-porcelain "$file" | grep '^committer ' | cut -d' ' -f2-)

    # Trim leading space and '+' characters if present
    title=$(echo "$line" | sed -E 's/^\s*(\/\/|\*|#)\s*//' | sed 's/^\s*//')



  # check if issue exists

    response=$(
    curl -s -X POST https://api.linear.app/graphql \
      -H "Content-Type: application/json" \
      -H "Authorization: $LINEAR_API_KEY" \
      --data @- <<EOF
      {
        "query": "query SearchIssues(\$filter: IssueFilter, \$term: String!, \$teamId: String) { 
          searchIssues(filter: \$filter, term: \$term, teamId: \$teamId) { 
            nodes { title } 
          } 
        }",
        "variables": {
          "filter": {
            "title": {
              "eq": "$title"
            }
          },
          "term": "$title",
          "teamId": "$TEAM_ID"
        }
      }
EOF
)

  # Use jq to get the length of the nodes array, if it's not 0 that means the issue already exists
  node_count=$(echo "$response" | jq '.data.searchIssues.nodes | length')

  if [[ "$node_count" -eq 0 ]] then
    echo "No issue found. Creating new issue..."

    priority=0

    if [[ $title = "FIXME"* ]] then
      priority=2
    elif [[ $title = "BUG"* ]] then
      priority=2
    elif [[ $title = "TODO"* ]] then
      priority=3
    fi

    commit=$(git annotate -L $lineNum,$lineNum "$file" | awk '{print $1}')
    echo "FILE $file"
    echo "COMMIT $commit"

    url="https://github.com/${REPO_NAME}/commit/$commit"
    
    description="This issue was automatically generated by Github workflow.\nFound in: $file at line $lineNum\nCommitted by: @$author.\nYou can check the original file for more information. For full commit details, follow this link:\n$url"

  # create the issue that doesn't exist
   curl https://api.linear.app/graphql \
    -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: $LINEAR_API_KEY" \
    --data @- <<EOF
      {
        "query": "mutation CreateI(\$input: IssueCreateInput!) { 
          issueCreate(input: \$input) { 
            success 
            issue { 
              id 
              title 
            } 
          } 
        }",
        "variables": {
          "input": {
            "title": "$title",
            "description": "$description",
            "priority": $priority,
            "teamId": "$TEAM_ID"
          }
        }
      }
EOF

  else
    echo "Issue already exists with that title"
  fi

  done
done
